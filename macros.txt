`define M_FIELD_QDA_ENUM(TYPE,T,ARG,FLAG) \
`define M_UVM_ARRAY_RESIZE(ARG,VAL) \
`define M_UVM_FIELD_DATA_AA_enum_key(KEY, ARG, FLAG) \
`define M_UVM_FIELD_DATA_AA_generic(TYPE, KEY, ARG, FLAG) \
`define M_UVM_FIELD_DATA_AA_int_key(KEY, ARG, FLAG) \
`define M_UVM_FIELD_DATA_AA_int_string(ARG, FLAG) \
`define M_UVM_FIELD_DATA_AA_object_int(ARG, FLAG) \
`define M_UVM_FIELD_DATA_AA_object_string(ARG, FLAG) \
`define M_UVM_FIELD_DATA_AA_string_string(ARG, FLAG) \
`define M_UVM_FIELD_QDA_INT(TYPE,ARG,FLAG) \
`define M_UVM_FIELD_QDA_OBJECT(TYPE,ARG,FLAG) \
`define M_UVM_FIELD_QDA_STRING(TYPE,ARG,FLAG) \
`define M_UVM_FIELD_SET_AA_INT_ENUMTYPE(INDEX_TYPE, ARRAY_TYPE, ARRAY, RHS, FLAG) \
`define M_UVM_FIELD_SET_AA_INT_TYPE(INDEX_TYPE, ARRAY_TYPE, ARRAY, RHS, FLAG) \
`define M_UVM_FIELD_SET_AA_OBJECT_TYPE(INDEX_TYPE, ARRAY, FLAG) \
`define M_UVM_FIELD_SET_AA_TYPE(INDEX_TYPE, ARRAY_TYPE, ARRAY, RHS, FLAG) \
`define M_UVM_QUEUE_RESIZE(ARG,VAL) \
`define M_UVM_SARRAY_RESIZE(ARG,VAL) \
`define QUESTA
`define UVM_BASE_SVH
`define UVM_BLOCKING_GET_IMP(imp, TYPE, arg) \
`define UVM_BLOCKING_GET_IMP_SFX(SFX, imp, TYPE, arg) \
`define UVM_BLOCKING_GET_PEEK_IMP(imp, TYPE, arg) \
`define UVM_BLOCKING_PEEK_IMP(imp, TYPE, arg) \
`define UVM_BLOCKING_PEEK_IMP_SFX(SFX, imp, TYPE, arg) \
`define UVM_BLOCKING_PUT_IMP(imp, TYPE, arg) \
`define UVM_BLOCKING_PUT_IMP_SFX(SFX, imp, TYPE, arg) \
`define UVM_BLOCKING_TRANSPORT_IMP(imp, REQ, RSP, req_arg, rsp_arg) \
`define UVM_BLOCKING_TRANSPORT_IMP_SFX(SFX, imp, REQ, RSP, req_arg, rsp_arg) \
`define UVM_CALLBACK_SVH
`define UVM_CB_MACROS_SVH
`define UVM_CMDLINE_PROCESSOR_SV
`define UVM_CORESERVICE_TYPE uvm_default_coreservice_t
`define UVM_DEFAULT_TIMEOUT 9200s
`define UVM_DPI_SVH
`define UVM_EXPORT_COMMON(MASK,TYPE_NAME) \
`define UVM_FUNCTION_ERROR "TLM interface function not implemented"
`define UVM_GET_IMP(imp, TYPE, arg) \
`define UVM_GET_PEEK_IMP(imp, TYPE, arg) \
`define UVM_GLOBAL_DEFINES_SVH
`define UVM_HDL_MAX_WIDTH 1024
`define UVM_HDL__SVH
`define UVM_HEARTBEAT_SVH
`define UVM_IMP_COMMON(MASK,TYPE_NAME,IMP) \
`define UVM_MACROS_SVH
`define UVM_MAJOR_REV 1
`define UVM_MAJOR_REV_1
`define UVM_MAJOR_VERSION_1_2
`define UVM_MEM_MAM__SV
`define UVM_MESSAGE_DEFINES_SVH
`define UVM_MINOR_REV 2
`define UVM_MINOR_REV_2
`define UVM_MS_IMP_COMMON(MASK,TYPE_NAME) \
`define UVM_NAME UVM
`define UVM_NONBLOCKING_GET_IMP(imp, TYPE, arg) \
`define UVM_NONBLOCKING_GET_IMP_SFX(SFX, imp, TYPE, arg) \
`define UVM_NONBLOCKING_GET_PEEK_IMP(imp, TYPE, arg) \
`define UVM_NONBLOCKING_PEEK_IMP(imp, TYPE, arg) \
`define UVM_NONBLOCKING_PEEK_IMP_SFX(SFX, imp, TYPE, arg) \
`define UVM_NONBLOCKING_PUT_IMP(imp, TYPE, arg) \
`define UVM_NONBLOCKING_PUT_IMP_SFX(SFX, imp, TYPE, arg) \
`define UVM_NONBLOCKING_TRANSPORT_IMP(imp, REQ, RSP, req_arg, rsp_arg) \
`define UVM_NONBLOCKING_TRANSPORT_IMP_SFX(SFX, imp, REQ, RSP, req_arg, rsp_arg) \
`define UVM_OBJECTION_SVH
`define UVM_OBJECT_DEFINES_SVH
`define UVM_PEEK_IMP(imp, TYPE, arg) \
`define UVM_PHASE_DEFINES_SVH
`define UVM_PH_TRACE(ID,MSG,PH,VERB) \
`define UVM_PKG_SV
`define UVM_PORT_COMMON(MASK,TYPE_NAME) \
`define UVM_POST_VERSION_1_1
`define UVM_PRINTER_DEFINES_SVH
`define UVM_PUT_IMP(imp, TYPE, arg) \
`define UVM_QUEUE_SVH
`define UVM_REGISTRY_SVH
`define UVM_REG_MODEL__SV
`define UVM_REPORT_CATCHER_SVH
`define UVM_REPORT_CLIENT_SVH
`define UVM_REPORT_DISABLE_FILE
`define UVM_REPORT_DISABLE_LINE
`define UVM_REPORT_HANDLER_SVH
`define UVM_REPORT_MESSAGE_SVH
`define UVM_REPORT_SERVER_SVH
`define UVM_RESOURCE_GET_FCNS(base_type)                                               \
`define UVM_SEQ_ITEM_FUNCTION_ERROR "Sequencer interface function not implemented"
`define UVM_SEQ_ITEM_GET_MASK                 (1<<7)
`define UVM_SEQ_ITEM_GET_NEXT_ITEM_MASK       (1<<0)
`define UVM_SEQ_ITEM_HAS_DO_AVAILABLE_MASK    (1<<3)
`define UVM_SEQ_ITEM_ITEM_DONE_MASK           (1<<2)
`define UVM_SEQ_ITEM_PEEK_MASK                (1<<8)
`define UVM_SEQ_ITEM_PULL_IMP(imp, REQ, RSP, req_arg, rsp_arg) \
`define UVM_SEQ_ITEM_PULL_MASK  (`UVM_SEQ_ITEM_GET_NEXT_ITEM_MASK | `UVM_SEQ_ITEM_TRY_NEXT_ITEM_MASK | \
`define UVM_SEQ_ITEM_PUSH_MASK  (`UVM_SEQ_ITEM_PUT_MASK)
`define UVM_SEQ_ITEM_PUT_MASK                 (1<<6)
`define UVM_SEQ_ITEM_PUT_RESPONSE_MASK        (1<<5)
`define UVM_SEQ_ITEM_TASK_ERROR "Sequencer interface task not implemented"
`define UVM_SEQ_ITEM_TRY_NEXT_ITEM_MASK       (1<<1)
`define UVM_SEQ_ITEM_UNI_PULL_MASK (`UVM_SEQ_ITEM_GET_NEXT_ITEM_MASK | `UVM_SEQ_ITEM_TRY_NEXT_ITEM_MASK | \
`define UVM_SEQ_ITEM_WAIT_FOR_SEQUENCES_MASK  (1<<4)
`define UVM_SEQ_PORT(MASK,TYPE_NAME) \
`define UVM_TASK_ERROR "TLM interface task not implemented"
`define UVM_TLM_ANALYSIS_MASK              (1<<8)
`define UVM_TLM_BLOCKING_GET_MASK          (1<<1)
`define UVM_TLM_BLOCKING_GET_PEEK_MASK    (`UVM_TLM_BLOCKING_GET_MASK    | `UVM_TLM_BLOCKING_PEEK_MASK)
`define UVM_TLM_BLOCKING_MASTER_MASK      (`UVM_TLM_BLOCKING_PUT_MASK       | `UVM_TLM_BLOCKING_GET_MASK | `UVM_TLM_BLOCKING_PEEK_MASK | `UVM_TLM_MASTER_BIT_MASK)
`define UVM_TLM_BLOCKING_PEEK_MASK         (1<<2)
`define UVM_TLM_BLOCKING_PUT_MASK          (1<<0)
`define UVM_TLM_BLOCKING_SLAVE_MASK       (`UVM_TLM_BLOCKING_PUT_MASK       | `UVM_TLM_BLOCKING_GET_MASK | `UVM_TLM_BLOCKING_PEEK_MASK | `UVM_TLM_SLAVE_BIT_MASK)
`define UVM_TLM_BLOCKING_TRANSPORT_MASK    (1<<3)
`define UVM_TLM_B_MASK      (1<<2)
`define UVM_TLM_B_TRANSPORT_IMP(imp, T, t, delay)                        \
`define UVM_TLM_FIFO_FUNCTION_ERROR "fifo channel function not implemented"
`define UVM_TLM_FIFO_TASK_ERROR "fifo channel task not implemented"
`define UVM_TLM_FUNCTION_ERROR "TLM-2 interface function not implemented"
`define UVM_TLM_GET_MASK                  (`UVM_TLM_BLOCKING_GET_MASK    | `UVM_TLM_NONBLOCKING_GET_MASK)
`define UVM_TLM_GET_PEEK_MASK             (`UVM_TLM_GET_MASK | `UVM_TLM_PEEK_MASK)
`define UVM_TLM_GET_TYPE_NAME(NAME) \
`define UVM_TLM_IMPS_SVH
`define UVM_TLM_MASTER_BIT_MASK            (1<<9)
`define UVM_TLM_MASTER_MASK               (`UVM_TLM_BLOCKING_MASTER_MASK    | `UVM_TLM_NONBLOCKING_MASTER_MASK)
`define UVM_TLM_NB_BW_MASK  (1<<1)
`define UVM_TLM_NB_FW_MASK  (1<<0)
`define UVM_TLM_NB_TRANSPORT_BW_IMP(imp, T, P, t, p, delay) \
`define UVM_TLM_NB_TRANSPORT_FW_IMP(imp, T, P, t, p, delay)              \
`define UVM_TLM_NONBLOCKING_GET_MASK       (1<<5)
`define UVM_TLM_NONBLOCKING_GET_PEEK_MASK (`UVM_TLM_NONBLOCKING_GET_MASK | `UVM_TLM_NONBLOCKING_PEEK_MASK)
`define UVM_TLM_NONBLOCKING_MASTER_MASK   (`UVM_TLM_NONBLOCKING_PUT_MASK    | `UVM_TLM_NONBLOCKING_GET_MASK | `UVM_TLM_NONBLOCKING_PEEK_MASK | `UVM_TLM_MASTER_BIT_MASK)
`define UVM_TLM_NONBLOCKING_PEEK_MASK      (1<<6)
`define UVM_TLM_NONBLOCKING_PUT_MASK       (1<<4)
`define UVM_TLM_NONBLOCKING_SLAVE_MASK    (`UVM_TLM_NONBLOCKING_PUT_MASK    | `UVM_TLM_NONBLOCKING_GET_MASK | `UVM_TLM_NONBLOCKING_PEEK_MASK | `UVM_TLM_SLAVE_BIT_MASK)
`define UVM_TLM_NONBLOCKING_TRANSPORT_MASK (1<<7)
`define UVM_TLM_PEEK_MASK                 (`UVM_TLM_BLOCKING_PEEK_MASK   | `UVM_TLM_NONBLOCKING_PEEK_MASK)
`define UVM_TLM_PUT_MASK                  (`UVM_TLM_BLOCKING_PUT_MASK    | `UVM_TLM_NONBLOCKING_PUT_MASK)
`define UVM_TLM_SLAVE_BIT_MASK             (1<<10)
`define UVM_TLM_SLAVE_MASK                (`UVM_TLM_BLOCKING_SLAVE_MASK    | `UVM_TLM_NONBLOCKING_SLAVE_MASK)
`define UVM_TLM_TASK_ERROR "TLM-2 interface task not implemented"
`define UVM_TLM_TRANSPORT_MASK            (`UVM_TLM_BLOCKING_TRANSPORT_MASK | `UVM_TLM_NONBLOCKING_TRANSPORT_MASK)
`define UVM_TRANSPORT_IMP(imp, REQ, RSP, req_arg, rsp_arg) \
`define UVM_VERSION_1_2
`define UVM_VERSION_DEFINES_SVH
`define UVM_VERSION_SVH
`define m_uvm_bottomup_phase(PHASE,COMP,PREFIX) \
`define m_uvm_component_registry_internal(T,S) \
`define m_uvm_component_registry_param(T) \
`define m_uvm_get_type_name_func(T) \
`define m_uvm_object_create_func(T) \
`define m_uvm_object_registry_internal(T,S) \
`define m_uvm_object_registry_param(T) \
`define m_uvm_print_int(ARG,FLAG) \
`define m_uvm_record_int(ARG,FLAG) \
`define m_uvm_record_object(ARG,FLAG) \
`define m_uvm_record_qda_enum(ARG, FLAG, SZ) \
`define m_uvm_record_qda_int(ARG, FLAG, SZ) \
`define m_uvm_record_qda_object(ARG, FLAG, SZ) \
`define m_uvm_record_qda_string(ARG, FLAG, SZ) \
`define m_uvm_record_string(ARG,STR,FLAG) \
`define m_uvm_register_sequence(TYPE_NAME, SEQUENCER) \
`define m_uvm_task_phase(PHASE,COMP,PREFIX) \
`define m_uvm_topdown_phase(PHASE,COMP,PREFIX) \
`define uvm_add_to_seq_lib(TYPE,LIBTYPE) \
`define uvm_analysis_imp_decl(SFX) \
`define uvm_blocking_get_imp_decl(SFX) \
`define uvm_blocking_get_peek_imp_decl(SFX) \
`define uvm_blocking_master_imp_decl(SFX) \
`define uvm_blocking_peek_imp_decl(SFX) \
`define uvm_blocking_put_imp_decl(SFX) \
`define uvm_blocking_slave_imp_decl(SFX) \
`define uvm_blocking_transport_imp_decl(SFX) \
`define uvm_builtin_bottomup_phase(PHASE) \
`define uvm_builtin_task_phase(PHASE) \
`define uvm_builtin_topdown_phase(PHASE) \
`define uvm_cb_trace(OBJ,CB,OPER) /* null */
`define uvm_cb_trace(OBJ,CB,OPER) \
`define uvm_cb_trace_noobj(CB,OPER) /* null */
`define uvm_cb_trace_noobj(CB,OPER) \
`define uvm_component_param_utils(T)
`define uvm_component_param_utils(T) \
`define uvm_component_param_utils_begin(T)
`define uvm_component_param_utils_begin(T) \
`define uvm_component_registry(T,S) \
`define uvm_component_utils(T)
`define uvm_component_utils(T) \
`define uvm_component_utils_begin(T)
`define uvm_component_utils_begin(T) \
`define uvm_component_utils_end
`define uvm_component_utils_end \
`define uvm_create(SEQ_OR_ITEM) \
`define uvm_create_on(SEQ_OR_ITEM, SEQR) \
`define uvm_create_seq(UVM_SEQ, SEQR_CONS_IF) \
`define uvm_declare_p_sequencer(SEQUENCER) \
`define uvm_declare_sequence_lib \
`define uvm_delay(TIME) #(TIME);
`define uvm_do(SEQ_OR_ITEM) \
`define uvm_do_callbacks(T,CB,METHOD) \
`define uvm_do_callbacks_exit_on(T,CB,METHOD,VAL) \
`define uvm_do_obj_callbacks(T,CB,OBJ,METHOD) \
`define uvm_do_obj_callbacks_exit_on(T,CB,OBJ,METHOD,VAL) \
`define uvm_do_on(SEQ_OR_ITEM, SEQR) \
`define uvm_do_on_pri(SEQ_OR_ITEM, SEQR, PRIORITY) \
`define uvm_do_on_pri_with(SEQ_OR_ITEM, SEQR, PRIORITY, CONSTRAINTS) \
`define uvm_do_on_with(SEQ_OR_ITEM, SEQR, CONSTRAINTS) \
`define uvm_do_pri(SEQ_OR_ITEM, PRIORITY) \
`define uvm_do_pri_with(SEQ_OR_ITEM, PRIORITY, CONSTRAINTS) \
`define uvm_do_seq(UVM_SEQ, SEQR_CONS_IF) \
`define uvm_do_seq_with(UVM_SEQ, SEQR_CONS_IF, CONSTRAINTS) \
`define uvm_do_with(SEQ_OR_ITEM, CONSTRAINTS) \
`define uvm_end_package \
`define uvm_error(ID, MSG) \
`define uvm_error_begin(ID, MSG, RM = __uvm_msg) \
`define uvm_error_context(ID, MSG, RO) \
`define uvm_error_context_begin(ID, MSG, RO, RM = __uvm_msg) \
`define uvm_error_context_end \
`define uvm_error_end \
`define uvm_fatal(ID, MSG) \
`define uvm_fatal_begin(ID, MSG, RM = __uvm_msg) \
`define uvm_fatal_context(ID, MSG, RO) \
`define uvm_fatal_context_begin(ID, MSG, RO, RM = __uvm_msg) \
`define uvm_fatal_context_end \
`define uvm_fatal_end \
`define uvm_field_aa_int_byte(ARG, FLAG)
`define uvm_field_aa_int_byte(ARG, FLAG) \
`define uvm_field_aa_int_byte_unsigned(ARG, FLAG)
`define uvm_field_aa_int_byte_unsigned(ARG, FLAG) \
`define uvm_field_aa_int_enumkey(KEY, ARG, FLAG) \
`define uvm_field_aa_int_int(ARG, FLAG)
`define uvm_field_aa_int_int(ARG, FLAG) \
`define uvm_field_aa_int_int_unsigned(ARG, FLAG)
`define uvm_field_aa_int_int_unsigned(ARG, FLAG) \
`define uvm_field_aa_int_integer(ARG, FLAG)
`define uvm_field_aa_int_integer(ARG, FLAG) \
`define uvm_field_aa_int_integer_unsigned(ARG, FLAG)
`define uvm_field_aa_int_integer_unsigned(ARG, FLAG) \
`define uvm_field_aa_int_key(KEY, ARG, FLAG)
`define uvm_field_aa_int_key(KEY, ARG, FLAG) \
`define uvm_field_aa_int_longint(ARG, FLAG)
`define uvm_field_aa_int_longint(ARG, FLAG) \
`define uvm_field_aa_int_longint_unsigned(ARG, FLAG)
`define uvm_field_aa_int_longint_unsigned(ARG, FLAG) \
`define uvm_field_aa_int_shortint(ARG, FLAG)
`define uvm_field_aa_int_shortint(ARG, FLAG) \
`define uvm_field_aa_int_shortint_unsigned(ARG, FLAG)
`define uvm_field_aa_int_shortint_unsigned(ARG, FLAG) \
`define uvm_field_aa_int_string(ARG, FLAG)
`define uvm_field_aa_int_string(ARG, FLAG) \
`define uvm_field_aa_object_int(ARG, FLAG)
`define uvm_field_aa_object_int(ARG, FLAG) \
`define uvm_field_aa_object_string(ARG, FLAG)
`define uvm_field_aa_object_string(ARG, FLAG) \
`define uvm_field_aa_string_int(ARG, FLAG)
`define uvm_field_aa_string_string(ARG, FLAG)
`define uvm_field_aa_string_string(ARG, FLAG) \
`define uvm_field_array_enum(ARG,FLAG)
`define uvm_field_array_enum(T,ARG,FLAG) \
`define uvm_field_array_int(ARG,FLAG)
`define uvm_field_array_int(ARG,FLAG) \
`define uvm_field_array_object(ARG,FLAG)
`define uvm_field_array_object(ARG,FLAG) \
`define uvm_field_array_string(ARG,FLAG)
`define uvm_field_array_string(ARG,FLAG) \
`define uvm_field_enum(T,ARG,FLAG)
`define uvm_field_enum(T,ARG,FLAG) \
`define uvm_field_event(ARG,FLAG)
`define uvm_field_event(ARG,FLAG) \
`define uvm_field_int(ARG,FLAG)
`define uvm_field_int(ARG,FLAG) \
`define uvm_field_object(ARG,FLAG)
`define uvm_field_object(ARG,FLAG) \
`define uvm_field_queue_enum(ARG,FLAG)
`define uvm_field_queue_enum(T,ARG,FLAG) \
`define uvm_field_queue_int(ARG,FLAG)
`define uvm_field_queue_int(ARG,FLAG) \
`define uvm_field_queue_object(ARG,FLAG)
`define uvm_field_queue_object(ARG,FLAG) \
`define uvm_field_queue_string(ARG,FLAG)
`define uvm_field_queue_string(ARG,FLAG) \
`define uvm_field_real(ARG,FLAG)
`define uvm_field_real(ARG,FLAG) \
`define uvm_field_sarray_enum(ARG,FLAG)
`define uvm_field_sarray_enum(T,ARG,FLAG) \
`define uvm_field_sarray_int(ARG,FLAG)
`define uvm_field_sarray_int(ARG,FLAG) \
`define uvm_field_sarray_object(ARG,FLAG)
`define uvm_field_sarray_object(ARG,FLAG) \
`define uvm_field_sarray_string(ARG,FLAG)
`define uvm_field_sarray_string(ARG,FLAG) \
`define uvm_field_string(ARG,FLAG)
`define uvm_field_string(ARG,FLAG) \
`define uvm_field_utils_begin(T) 
`define uvm_field_utils_begin(T) \
`define uvm_field_utils_end 
`define uvm_field_utils_end \
`define uvm_file ""
`define uvm_file `__FILE__
`define uvm_get_imp_decl(SFX) \
`define uvm_get_peek_imp_decl(SFX) \
`define uvm_info(ID, MSG, VERBOSITY) \
`define uvm_info_begin(ID, MSG, VERBOSITY, RM = __uvm_msg) \
`define uvm_info_context(ID, MSG, VERBOSITY, RO) \
`define uvm_info_context_begin(ID, MSG, VERBOSITY, RO, RM = __uvm_msg) \
`define uvm_info_context_end \
`define uvm_info_end \
`define uvm_line 0
`define uvm_line `__LINE__
`define uvm_master_imp_decl(SFX) \
`define uvm_message_add_int(VAR, RADIX, LABEL="", ACTION=(UVM_LOG|UVM_RM_RECORD)) \
`define uvm_message_add_object(VAR, LABEL="", ACTION=(UVM_LOG|UVM_RM_RECORD)) \
`define uvm_message_add_string(VAR, LABEL="", ACTION=(UVM_LOG|UVM_RM_RECORD)) \
`define uvm_message_add_tag(NAME, VALUE, ACTION=(UVM_LOG|UVM_RM_RECORD)) \
`define uvm_message_begin(SEVERITY, ID, MSG, VERBOSITY, FILE, LINE, RM) \
`define uvm_message_context_begin(SEVERITY, ID, MSG, VERBOSITY, FILE, LINE, RO, RM) \
`define uvm_message_context_end \
`define uvm_message_end \
`define uvm_new_func \
`define uvm_non_blocking_transport_imp_decl(SFX) \
`define uvm_nonblocking_get_imp_decl(SFX) \
`define uvm_nonblocking_get_peek_imp_decl(SFX) \
`define uvm_nonblocking_master_imp_decl(SFX) \
`define uvm_nonblocking_peek_imp_decl(SFX) \
`define uvm_nonblocking_put_imp_decl(SFX) \
`define uvm_nonblocking_slave_imp_decl(SFX) \
`define uvm_nonblocking_transport_imp_decl(SFX) \
`define uvm_object_param_utils(T) 
`define uvm_object_param_utils(T) \
`define uvm_object_param_utils_begin(T) 
`define uvm_object_param_utils_begin(T) \
`define uvm_object_registry(T,S) \
`define uvm_object_utils(T) 
`define uvm_object_utils(T) \
`define uvm_object_utils_begin(T) 
`define uvm_object_utils_begin(T) \
`define uvm_object_utils_end
`define uvm_object_utils_end \
`define uvm_pack_array(VAR) \
`define uvm_pack_arrayN(VAR,SIZE) \
`define uvm_pack_enum(VAR) \
`define uvm_pack_enumN(VAR,SIZE) \
`define uvm_pack_int(VAR) \
`define uvm_pack_intN(VAR,SIZE) \
`define uvm_pack_queue(VAR) \
`define uvm_pack_queueN(VAR,SIZE) \
`define uvm_pack_real(VAR) \
`define uvm_pack_sarray(VAR)  \
`define uvm_pack_sarrayN(VAR,SIZE) \
`define uvm_pack_string(VAR) \
`define uvm_package(PKG) \
`define uvm_peek_imp_decl(SFX) \
`define uvm_print_aa_int_key4(KEY, F, R, P) \
`define uvm_print_aa_int_object(F,FLAG) \
`define uvm_print_aa_int_object3(F, P,FLAG) \
`define uvm_print_aa_string_int(F) \
`define uvm_print_aa_string_int3(F, R, P) \
`define uvm_print_aa_string_object(F,FLAG) \
`define uvm_print_aa_string_object3(F, P,FLAG) \
`define uvm_print_aa_string_string(F) \
`define uvm_print_aa_string_string2(F, P) \
`define uvm_print_array_int(F, R) \
`define uvm_print_array_int3(F, R, P) \
`define uvm_print_array_object(F,FLAG) \
`define uvm_print_array_object3(F, P,FLAG) \
`define uvm_print_array_string(F) \
`define uvm_print_array_string2(F, P) \
`define uvm_print_enum(T, F, NM, P) \
`define uvm_print_int(F, R) \
`define uvm_print_int3(F, R, P) \
`define uvm_print_int4(F, R, NM, P) \
`define uvm_print_object(F) \
`define uvm_print_object2(F, P) \
`define uvm_print_object_qda4(F, P, T,FLAG) \
`define uvm_print_object_queue(F,FLAG) \
`define uvm_print_object_queue3(F, P,FLAG) \
`define uvm_print_qda_enum(F, P, T, ET) \
`define uvm_print_qda_int4(F, R, P, T) \
`define uvm_print_queue_int(F, R) \
`define uvm_print_queue_int3(F, R, P) \
`define uvm_print_sarray_int3(F, R, P) \
`define uvm_print_sarray_object(F,FLAG) \
`define uvm_print_sarray_object3(F, P,FLAG) \
`define uvm_print_sarray_string2(F, P) \
`define uvm_print_string(F) \
`define uvm_print_string2(F, P) \
`define uvm_print_string_qda3(F, P, T) \
`define uvm_print_string_queue(F) \
`define uvm_print_string_queue2(F, P) \
`define uvm_put_imp_decl(SFX) \
`define uvm_rand_send(SEQ_OR_ITEM) \
`define uvm_rand_send_pri(SEQ_OR_ITEM, PRIORITY) \
`define uvm_rand_send_pri_with(SEQ_OR_ITEM, PRIORITY, CONSTRAINTS) \
`define uvm_rand_send_with(SEQ_OR_ITEM, CONSTRAINTS) \
`define uvm_record_field(NAME,VALUE) \
`define uvm_register_cb(T,CB) \
`define uvm_send(SEQ_OR_ITEM) \
`define uvm_send_pri(SEQ_OR_ITEM, PRIORITY) \
`define uvm_sequence_library_package(PKG_NAME) \
`define uvm_sequence_library_utils(TYPE) \
`define uvm_sequence_utils(TYPE_NAME, SEQUENCER) \
`define uvm_sequence_utils_begin(TYPE_NAME, SEQUENCER) \
`define uvm_sequence_utils_end \
`define uvm_sequencer_param_utils(TYPE_NAME) \
`define uvm_sequencer_param_utils_begin(TYPE_NAME) \
`define uvm_sequencer_utils(TYPE_NAME) \
`define uvm_sequencer_utils_begin(TYPE_NAME) \
`define uvm_sequencer_utils_end \
`define uvm_set_super_type(T,ST) \
`define uvm_slave_imp_decl(SFX) \
`define uvm_transport_imp_decl(SFX) \
`define uvm_typename(X) $typename(X)
`define uvm_typename(X) $typename(X,39)
`define uvm_unpack_array(VAR) \
`define uvm_unpack_arrayN(VAR,SIZE) \
`define uvm_unpack_enum(VAR,TYPE) \
`define uvm_unpack_enumN(VAR,SIZE,TYPE) \
`define uvm_unpack_int(VAR) \
`define uvm_unpack_intN(VAR,SIZE) \
`define uvm_unpack_queue(VAR) \
`define uvm_unpack_queueN(VAR,SIZE) \
`define uvm_unpack_real(VAR) \
`define uvm_unpack_sarray(VAR)  \
`define uvm_unpack_sarrayN(VAR,SIZE) \
`define uvm_unpack_string(VAR) \
`define uvm_update_sequence_lib \
`define uvm_update_sequence_lib_and_item(USER_ITEM) \
`define uvm_user_bottomup_phase(PHASE,COMP,PREFIX) \
`define uvm_user_task_phase(PHASE,COMP,PREFIX) \
`define uvm_user_topdown_phase(PHASE,COMP,PREFIX) \
`define uvm_warning(ID, MSG) \
`define uvm_warning_begin(ID, MSG, RM = __uvm_msg) \
`define uvm_warning_context(ID, MSG, RO) \
`define uvm_warning_context_begin(ID, MSG, RO, RM = __uvm_msg) \
`define uvm_warning_context_end \
`define uvm_warning_end \
